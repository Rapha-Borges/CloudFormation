name: Issue Deploy

on:
  issues:
    types: [labeled]

env:
  AWS_REGION: 'us-east-1'

jobs:
  infra_giropops:
    name: Deploy Infra Giropops
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'infra-giropops') &&
        contains(github.event.issue.labels.*.name, 'approved')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Infra Giropops
        id: giropops-infra
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
            name: giropops-infra
            template: './files/giropops-infra.yaml'
            no-fail-on-empty-changeset: "1"
            capabilities: CAPABILITY_IAM
            timeout-in-minutes: "10"
    
      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          echo "::set-output name=cf_outputs::$(aws cloudformation describe-stacks --stack-name giropops-infra --query 'Stacks[0].Outputs' --output json)"

      - name: Write Outputs to Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            The following resources were created:

            ```json
            ${{ steps.get_outputs.outputs.cf_outputs }}
            ```
          token: ${{ secrets.CLOUD_FORMATION }}

  database:
    name: Deploy Database
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'database') &&
        contains(github.event.issue.labels.*.name, 'approved')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy Database
        id: giropops-database
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
            name: giropops-database
            template: './files/database.yaml'
            no-fail-on-empty-changeset: "1"
            capabilities: CAPABILITY_IAM
            timeout-in-minutes: "10"

  ec2:
    name: Deploy EC2
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'ec2') &&
        contains(github.event.issue.labels.*.name, 'approved')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy EC2
        id: giropops-ec2
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
            name: giropops-ec2
            template: './files/ec2.yaml'
            no-fail-on-empty-changeset: "1"
            capabilities: CAPABILITY_IAM
            timeout-in-minutes: "10"

      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name giropops-ec2 --query 'Stacks[0].Outputs' --output json | tr -d '\n')
          if [ -z "$outputs" ]; then
            echo "A saída do CloudFormation está vazia."
          else
            echo "cf_outputs=${outputs}" >> $GITHUB_ENV
          fi

      - name: Extract Outputs
        run: |
          instance_id=$(echo "${{ env.cf_outputs }}" | jq -r '.[] | select(.OutputKey == "InstanceId").OutputValue')
          public_ip=$(echo "${{ env.cf_outputs }}" | jq -r '.[] | select(.OutputKey == "PublicIp").OutputValue')
          echo "instance_id=${instance_id}" >> $GITHUB_ENV
          echo "public_ip=${public_ip}" >> $GITHUB_ENV
            
      - name: Write Outputs to Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            The following resources were created:

              ```json
              InstanceId: ${{ env.instance_id }}
              PublicIp: ${{ env.public_ip }}
              ```
            token: ${{ secrets.CLOUD_FORMATION }}

  s3:
    name: Deploy S3
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 's3') &&
        contains(github.event.issue.labels.*.name, 'approved')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy S3
        id: giropops-s3
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
            name: giropops-s3
            template: './files/s3.yaml'
            no-fail-on-empty-changeset: "1"
            capabilities: CAPABILITY_IAM
            timeout-in-minutes: "10"
    
      - name: Get CloudFormation Outputs
        id: get_outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name giropops-s3 --query 'Stacks[0].Outputs' --output json | tr -d '\n')
          if [ -z "$outputs" ]; then
            echo "A saída do CloudFormation está vazia."
          else
            echo "cf_outputs=${outputs}" >> $GITHUB_ENV
          fi

      - name: Debug Outputs
        run: |
          echo "CloudFormation Outputs: ${{ env.cf_outputs }}"
        if: env.cf_outputs != 'null'
          
      - name: Write Outputs to Issue
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            The following resources were created:

            ```json
            ${{ env.cf_outputs }}
            ```
          token: ${{ secrets.CLOUD_FORMATION }}